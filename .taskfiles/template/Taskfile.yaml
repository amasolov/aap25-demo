---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  MAKEJINJA_CONFIG_FILE: '{{.ROOT_DIR}}/makejinja.toml'
  TEMPLATE_DIR: '{{.ROOT_DIR}}/templates'
  TEMPLATE_CONFIG_FILE: '{{.ROOT_DIR}}/config.yaml'

tasks:

  :init:
    desc: Initialize configuration files
    cmds:
      - mv {{.TEMPLATE_CONFIG_FILE | replace ".yaml" ".sample.yaml"}} {{.TEMPLATE_CONFIG_FILE}}
      - task: generate-age-key
      - task: generate-deploy-key
    status:
      - test -f {{.TEMPLATE_CONFIG_FILE}}

  generate-age-key:
    desc: Create the Sops Age key
    cmd: age-keygen --output {{.SOPS_AGE_KEY_FILE}}
    status:
      - test -f {{.SOPS_AGE_KEY_FILE}}
    preconditions:
      - which age-keygen

  generate-deploy-key:
    desc: Create the deploy key
    cmd: ssh-keygen -t ecdsa -b 521 -C "deploy-key" -f {{.ROOT_DIR}}/deploy.key -q -P ""
    status:
      - test -f {{.ROOT_DIR}}/deploy.key
    preconditions:
      - which ssh-keygen

  :configure:
    desc: Render and validate configuration files
    prompt: Any conflicting files in the terraform and ansible directories will be overwritten... continue?
    cmds:
      - task: render-configs
      - task: encrypt-secrets
      - task: terraform-init
      - task: ansible-init
    preconditions:
      - msg: |
          An existing Age key interferes with the age key in this repository.
          Rename or delete ~/.config/sops/age/keys.txt
        sh: '! test -f ~/.config/sops/age/keys.txt'

  render-configs:
    desc: Template the configuration files
    cmd: makejinja
    env:
      PYTHONDONTWRITEBYTECODE: '1'
    preconditions:
      - test -f {{.TEMPLATE_CONFIG_FILE}}
      - test -f {{.TEMPLATE_DIR}}/scripts/plugin.py
      - test -f {{.MAKEJINJA_CONFIG_FILE}}
      - which makejinja

  encrypt-secrets:
    desc: Encrypt secrets with Sops
    cmds:
      - for: { var: SECRET_FILES }
        cmd: |
          echo "Encrypting {{.ITEM}}"
          if sops filestatus "{{.ITEM}}" | jq --exit-status ".encrypted == false" &>/dev/null; then
              sops --encrypt --in-place "{{.ITEM}}"
          fi
    vars:
      SECRET_FILES:
        sh: find "{{.SECRETS_DIR}}" -type f -name "*.sops.*"
    preconditions:
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - test -f {{.ROOT_DIR}}/.sops.yaml
      - which sops

  terraform-init:
    desc: Initialize Terraform
    cmds:
      - cmd: |
          terraform -chdir={{.TERRAFORM_DIR}} init -input=false -reconfigure

  ansible-init:
    desc: Initialize Ansible
    cmds:
      - cmd: |
           ansible-galaxy collection install -r {{.ANSIBLE_DIR}}/requirements.yaml
